* https://github.com/opsengine/cpulimit/tree/master/src

* syscalls
/usr/include/x86_64-linux-gnu/bits/syscall.h
strace -f -c iceweasel

Trace files being opened by firefox
firejail strace -f -e open -o strace.out firefox



* Investigate mounting /sys

	/* Mount a version of /sys that describes the network namespace */
	if (umount2("/sys", MNT_DETACH) < 0) {
		fprintf(stderr, "umount of /sys failed: %s\n", strerror(errno));
		return -1;
	}
	if (mount(name, "/sys", "sysfs", 0, NULL) < 0) {
		fprintf(stderr, "mount of /sys failed: %s\n",strerror(errno));
		return -1;
	}
	
	
libvirt-lxc:
 - /sys the host "sysfs" instance remounted read-only
 - /proc a new instance of the "proc" filesystem
 - /proc/sys the host "/proc/sys" bind-mounted read-only
 
* libvirt-lxc description
 http://libvirt.org/drvlxc.html#fsmounts
 
* lxc description:
Linux containers offer:
- chroot
- network isolation
- Shared memory isolation
- hostname/domainname per-container
- PID isolation (many container can see PID number 314 in each of them, however these are different PIDs on the host machine
- user mappings (map UID 433 on the host as UID 15 or UID 0 in the container)
- resource limit isolation
- CPU, Memory and I/O limits per-group
- Device isolation per-group
- there is a mechanism in the kernel to freeze/unfreeze all processes inside a container with a single command
- Fine grained capabilities per-container
- Tools: Docker, LXC and a lot of others.
- Live migration - CRIU. If certain rules are met, you can even live migrate a linux container to another physical machine.

* lxc-freeze and lxc-clone - using btrfs to take a snapshot of a frozen container and cloning it
https://blogs.oracle.com/OTNGarage/entry/linux_container_lxc_part_2

* https://www.stgraber.org/2013/12/21/lxc-1-0-your-second-container/
In such cases, “sudo lxc-freeze -n <container name>” can be used. That very simply freezes all the processes in the container
so they won’t get any time allocated by the scheduler. However the processes will still exist and will still use whatever memory
they used to.

Once you need the service again, just call “sudo lxc-unfreeze -n <container name>” and all the processes will be restarted.

* container usage
http://www.enterprisetech.com/2014/05/28/google-runs-software-containers/
https://github.com/google/lmctfy/

* sound devices
/dev/dsp
/dev/adsp
/dev/audio
/dev/sndstat
/dev/mixer

$ ls /dev/snd
by-path  controlC0  pcmC0D0c  pcmC0D0p  pcmC0D1c  pcmC0D2p  seq  timer

$ cat /dev/sndstat
Sound Driver:3.8.1a-980706 (ALSA v1.0.24 emulation code)
Kernel: Linux debian 3.2.0-4-amd64 #1 SMP Debian 3.2.57-3+deb7u2 x86_64
Config options: 0

Installed drivers: 
Type 10: ALSA emulation

Card config: 
Intel ICH with ALC655 at irq 23

Audio devices: NOT ENABLED IN CONFIG

Synth devices: NOT ENABLED IN CONFIG

Midi devices: NOT ENABLED IN CONFIG

Timers:
31: system timer

Mixers: NOT ENABLED IN CONFIG

$ lsmod | grep snd
snd_intel8x0           30903  2 
snd_ac97_codec        106942  1 snd_intel8x0
snd_pcm                68083  2 snd_ac97_codec,snd_intel8x0
snd_page_alloc         13003  2 snd_pcm,snd_intel8x0
snd_timer              22917  1 snd_pcm
snd                    52889  8 snd_timer,snd_pcm,snd_ac97_codec,snd_intel8x0
ac97_bus               12510  1 snd_ac97_codec
soundcore              13065  1 snd
netblue@debian:~/work/firejail/trunk$ lspci | grep Audio
00:10.2 Multimedia audio controller: NVIDIA Corporation MCP51 AC97 Audio Controller (rev a2)
netblue@debian:~/work/firejail/trunk$ 


* function interposition

 A few caveats before we close. First, LD_PRELOAD is ignored for programs with the SUID
 permission bits set for security reasons. Since function interposition lets you make a program
 do almost anything you want it to, Linux prevents you from modifying the behavior of a program
  running on behalf of another user or group. Second, you cannot interpose internal library 
  function calls, since these are resolved before runtime. For instance, if some function in libc 
  calls malloc, it will never call a wrapper function from a different library.

Aside from these limitations, function interposition is a very powerful technique that is useful
 for monitoring programs or modifying their behavior. Happy interposing! 
 	
 Library call interposition
 
