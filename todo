* configure a macvlan interface

# ip link add virtual0 link eth0 type macvlan mode bridge
(you can configure it with # ifconfig virtual0 192.168.1.52/24 up)

create a new network namespace and move the interface in the new network namespace

# ip netns add dummy0
# ip link set virtual0 netns dummy0

join the namespace and configure the interfaces

# ip netns exec dummy0 bash
# ifconfig lo up
# ifconfig virtual0 192.168.1.52/24

Investigate ipvlan interface - added to linux kernel 3.19
https://github.com/torvalds/linux/blob/master/Documentation/networking/ipvlan.txt




* gnome-keyring
https://wiki.ubuntu.com/SecurityTeam/Specifications/ApplicationConfinement
nice article on gnome keyring
http://mdeslaur.blogspot.com/2009/11/gnome-keyring.html


* char " needs to be escaped
$ firejail svn commit -m "exit program if an invalid option is detected"
Parent pid 4415, child pid 4416
Interface           IP                  Mask                Status              
lo                  127.0.0.1           255.0.0.0           UP                  
eth0                192.168.1.60        255.255.255.0       UP                  

Child process initialized
svn: Commit failed (details follow):
svn: '/home/netblue/work/firejail-sf/program' is not under version control

parent is shutting down, bye...


* in overlay mode "sudo su -" doesn't work
etblue@ubuntu:~/work/firejail-sf$ firejail --overlay
Parent pid 4173, child pid 4174
Error: failed to unmount /sys
Interface           IP                  Mask                Status              
lo                  127.0.0.1           255.0.0.0           UP                  
eth0                192.168.1.47        255.255.255.0       UP                  

Child process initialized
[netblue@ubuntu firejail-sf]$ sudo su -
[sudo] password for netblue: 
su: System error
[netblue@ubuntu firejail-sf]$ 


* list dbus sockets
sudo netstat -nap | grep dbus | grep CONNECTED | awk '{print $8}' | sort | uniq -c


* private /dev directory
CAP_MKNOD and mknod() syscall - create special files including device files under /dev directory
libvirt-lxc containers clears CPA_MKNOD from the bounding set

libvirt-lxc

static virLXCCgroupDevicePolicy devices[] = {
348         {'c', LXC_DEV_MAJ_MEMORY, LXC_DEV_MIN_NULL},
349         {'c', LXC_DEV_MAJ_MEMORY, LXC_DEV_MIN_ZERO},
350         {'c', LXC_DEV_MAJ_MEMORY, LXC_DEV_MIN_FULL},
351         {'c', LXC_DEV_MAJ_MEMORY, LXC_DEV_MIN_RANDOM},
352         {'c', LXC_DEV_MAJ_MEMORY, LXC_DEV_MIN_URANDOM},
353         {'c', LXC_DEV_MAJ_TTY, LXC_DEV_MIN_TTY},
354         {'c', LXC_DEV_MAJ_TTY, LXC_DEV_MIN_PTMX},
355         {'c', LXC_DEV_MAJ_FUSE, LXC_DEV_MIN_FUSE},
356         {0,   0, 0}};
357 

    /dev/zero
    /dev/null
    /dev/full
    /dev/random
    /dev/urandom
they also seem to use tty and fuse    
    /dev/ptmx symlinked to /dev/pts/ptmx

    /dev/stdin symlinked to /proc/self/fd/0
    /dev/stdout symlinked to /proc/self/fd/1
    /dev/stderr symlinked to /proc/self/fd/2
    /dev/fd symlinked to /proc/self/fd
    /dev/console symlinked to /dev/pts/0 
 
LXC:
lxc.cgroup.devices.deny = a # Deny all access to devices
lxc.cgroup.devices.allow = c 1:3 rwm # dev/null
lxc.cgroup.devices.allow = c 1:5 rwm # dev/zero
lxc.cgroup.devices.allow = c 5:1 rwm # dev/console
lxc.cgroup.devices.allow = c 5:0 rwm # dev/tty
lxc.cgroup.devices.allow = c 4:0 rwm # dev/tty0
lxc.cgroup.devices.allow = c 1:9 rwm # dev/urandom
lxc.cgroup.devices.allow = c 1:8 rwm # dev/random
lxc.cgroup.devices.allow = c 136:* rwm # dev/pts/*
lxc.cgroup.devices.allow = c 5:2 rwm # dev/pts/ptmx
lxc.cgroup.devices.allow = c 254:0 rwm

static const struct lxc_devs lxc_devs[] = {
	{ "null",	S_IFCHR | S_IRWXU | S_IRWXG | S_IRWXO, 1, 3	},
	{ "zero",	S_IFCHR | S_IRWXU | S_IRWXG | S_IRWXO, 1, 5	},
	{ "full",	S_IFCHR | S_IRWXU | S_IRWXG | S_IRWXO, 1, 7	},
	{ "urandom",	S_IFCHR | S_IRWXU | S_IRWXG | S_IRWXO, 1, 9	},
	{ "random",	S_IFCHR | S_IRWXU | S_IRWXG | S_IRWXO, 1, 8	},
	{ "tty",	S_IFCHR | S_IRWXU | S_IRWXG | S_IRWXO, 5, 0	},
	{ "console",	S_IFCHR | S_IRUSR | S_IWUSR,	       5, 1	},
};



Gnome sandbox: https://wiki.gnome.org/Projects/SandboxedApps/Sandbox
    /dev/full, /dev/null, /dev/random, /dev/urandom, /dev/tty and /dev/zero
    /dev/shm is a private tmpfs
    /dev/dri is a bind mount of the host /dev/dri 

video device:
/dev/video* 

sound devices:
/dev/dsp
/dev/adsp
/dev/audio
/dev/sndstat
/dev/mixer

$ ls /dev/snd
by-path  controlC0  pcmC0D0c  pcmC0D0p  pcmC0D1c  pcmC0D2p  seq  timer

$ lsusb --verbose | less

$ cat /dev/sndstat
Sound Driver:3.8.1a-980706 (ALSA v1.0.24 emulation code)
Kernel: Linux debian 3.2.0-4-amd64 #1 SMP Debian 3.2.57-3+deb7u2 x86_64
Config options: 0

Installed drivers: 
Type 10: ALSA emulation

Card config: 
Intel ICH with ALC655 at irq 23

Audio devices: NOT ENABLED IN CONFIG

Synth devices: NOT ENABLED IN CONFIG

Midi devices: NOT ENABLED IN CONFIG

Timers:
31: system timer

Mixers: NOT ENABLED IN CONFIG

$ lsmod | grep snd
snd_intel8x0           30903  2 
snd_ac97_codec        106942  1 snd_intel8x0
snd_pcm                68083  2 snd_ac97_codec,snd_intel8x0
snd_page_alloc         13003  2 snd_pcm,snd_intel8x0
snd_timer              22917  1 snd_pcm
snd                    52889  8 snd_timer,snd_pcm,snd_ac97_codec,snd_intel8x0
ac97_bus               12510  1 snd_ac97_codec
soundcore              13065  1 snd
netblue@debian:~/work/firejail/trunk$ lspci | grep Audio
00:10.2 Multimedia audio controller: NVIDIA Corporation MCP51 AC97 Audio Controller (rev a2)
netblue@debian:~/work/firejail/trunk$ 


* bug???
netblue@debian:~/work/firejail-sf$ firejail --trace svn commit -m "0.9.14 testing"
Parent pid 7848, child pid 7849
Interface           IP                  Mask                Status              
lo                  127.0.0.1           255.0.0.0           UP                  
eth0                192.168.1.60        255.255.255.0       UP                  
br0                 10.10.20.1          255.255.255.248     UP                  
br1                 10.10.30.1          255.255.255.0       UP                  
br2                 10.10.40.1          255.255.255.0       UP                  
br3                 10.10.50.1          255.255.255.0       UP                  

Child process initialized
1:bash:open /dev/tty
1:svn:open /etc/subversion/servers
1:svn:open /home/netblue/.subversion/servers
1:svn:open /etc/subversion/config
1:svn:open /home/netblue/.subversion/config
1:svn:open /home/netblue/work/firejail-sf/.svn/entries
1:svn:open /home/netblue/work/firejail-sf/.svn/entries
1:svn:open /home/netblue/work/firejail-sf/.svn/entries
1:svn:open /home/netblue/work/firejail-sf/.svn/entries
1:svn:open /home/netblue/work/firejail-sf/.svn/entries
1:svn:open /home/netblue/work/firejail-sf/.svn/lock
1:svn:open /home/netblue/work/firejail-sf/.svn/entries
1:svn:unlink /home/netblue/work/firejail-sf/.svn/lock
svn: Commit failed (details follow):
svn: '/home/netblue/work/firejail-sf/testing' is not under version control

parent is shutting down, bye...

* AppArmor

http://lists.freedesktop.org/archives/systemd-devel/2014-February/016917.html
https://code.google.com/p/psutil/issues/detail?id=483


* Ubuntu cgroups:

cgroups are not mounted by default!

$ sudo su -
# cd /sys/fs/cgroup
# mkdir
# modprobe cls_cgroup
# mount -t cgroup -o cpuset,cpuacct,devices,memory,net_cls cgroup root
# mkdir root/g1

* Icon theme
http://tiheum.deviantart.com/art/Faenza-Icons-173323228

* systemd integration
see playpen: https://github.com/thestinger/playpen
allows setting: memory limit, devices, cpu accounting, blockio accounting
it has a learn mode where he records all syscalls for whitelisting purposes

* login box article
http://www.jwz.org/xscreensaver/toolkits.html

* nice linux namespaces article: http://www.toptal.com/linux/separation-anxiety-isolating-your-system-with-linux-namespaces

* check default caps blacklist for docker version 0.12

* The proof of concept exploit relies on a kernel capability that allows a process to open any file in the
 host based on its inode. On most systems, the inode of the / (root) filesystem is 2. With this information 
 and the kernel capability it is possible to walk the hostâ€™s filesystem tree until you find the object you wish 
 to open and then extract sensitive information like passwords.

* nice explanation of chmod g+s: http://www.library.yale.edu/wsg/docs/permissions/sgid.htm
